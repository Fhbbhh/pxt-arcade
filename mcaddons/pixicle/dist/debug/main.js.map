{"version":3,"sources":["../../scripts/main.ts"],"sourcesContent":["import { world, system, MolangVariableMap, MinecraftDimensionTypes, Vector3 } from \"@minecraft/server\";\n\nconst vars = new MolangVariableMap();\nconst overworld = world.getDimension(MinecraftDimensionTypes.overworld);\nlet pos: Vector3 | undefined;\n\nconst width = 160;\nconst height = 120;\nconst scale = 20;\nlet time = 0;\nconst step = 2 / 128;\nconst ONE_SECOND = 20;\nconst FPS = 0.5;\nconst animdt = Math.floor(ONE_SECOND / FPS);\nconst dt = animdt * 0.01;\n\n// Perlin Noise Utilities\nfunction fade(t: number): number {\n  return t * t * t * (t * (t * 6 - 15) + 10); // Smoothing function\n}\n\nfunction lerp(t: number, a: number, b: number): number {\n  return a + t * (b - a); // Linear interpolation\n}\n\nfunction grad(hash: number, x: number, y: number, z: number): number {\n  // Calculate gradient based on hash value\n  const h = hash & 15;\n  const u = h < 8 ? x : y;\n  const v = h < 4 ? y : (h === 12 || h === 14 ? x : z);\n  return (h & 1 ? -u : u) + (h & 2 ? -v : v);\n}\n\nfunction perlinNoise(x: number, y: number): number {\n  // Determine grid cell coordinates\n  const xi = Math.floor(x) & 255;\n  const yi = Math.floor(y) & 255;\n  const zi = Math.floor(time) & 255; // Use `time` as the third dimension for animation\n\n  // Local coordinates inside the grid cell\n  const xf = x - Math.floor(x);\n  const yf = y - Math.floor(y);\n  const zf = time - Math.floor(time); // Fractional part of time\n\n  // Smooth the local coordinates\n  const u = fade(xf);\n  const v = fade(yf);\n  const w = fade(zf);\n\n  // Hash the coordinates of the cube corners\n  const aaa = perm[perm[perm[xi] + yi] + zi];\n  const aba = perm[perm[perm[xi] + yi + 1] + zi];\n  const aab = perm[perm[perm[xi] + yi] + zi + 1];\n  const abb = perm[perm[perm[xi] + yi + 1] + zi + 1];\n  const baa = perm[perm[perm[xi + 1] + yi] + zi];\n  const bba = perm[perm[perm[xi + 1] + yi + 1] + zi];\n  const bab = perm[perm[perm[xi + 1] + yi] + zi + 1];\n  const bbb = perm[perm[perm[xi + 1] + yi + 1] + zi + 1];\n\n  // Compute the dot products of the gradients\n  const gradAAA = grad(aaa, xf, yf, zf);\n  const gradBAA = grad(baa, xf - 1, yf, zf);\n  const gradABA = grad(aba, xf, yf - 1, zf);\n  const gradBBA = grad(bba, xf - 1, yf - 1, zf);\n  const gradAAB = grad(aab, xf, yf, zf - 1);\n  const gradBAB = grad(bab, xf - 1, yf, zf - 1);\n  const gradABB = grad(abb, xf, yf - 1, zf - 1);\n  const gradBBB = grad(bbb, xf - 1, yf - 1, zf - 1);\n\n  // Interpolate between dot products\n  const x1 = lerp(u, gradAAA, gradBAA);\n  const x2 = lerp(u, gradABA, gradBBA);\n  const y1 = lerp(v, x1, x2);\n\n  const x3 = lerp(u, gradAAB, gradBAB);\n  const x4 = lerp(u, gradABB, gradBBB);\n  const y2 = lerp(v, x3, x4);\n\n  return lerp(w, y1, y2);\n}\n\n// Generate a permutation table for pseudo-randomness\nfunction generatePermutationTable(): number[] {\n  const perm: number[] = new Array(512);\n  const p: number[] = [];\n  for (let i = 0; i < 256; i++) {\n    p.push(i);\n  }\n\n  for (let i = 255; i > 0; i--) {\n    const n = Math.floor(Math.random() * (i + 1));\n    const temp = p[i];\n    p[i] = p[n];\n    p[n] = temp;\n  }\n\n  for (let i = 0; i < 512; i++) {\n    perm[i] = p[i & 255];\n  }\n\n  return perm;\n}\n\nconst noiseArray: number[] = new Array(width * height); // 1D array for 160x120 grid\n\n// Generate the Perlin noise for a given time value\nfunction generatePerlinNoise(): number[] {\n  for (let y = 0; y < height; y++) {\n    for (let x = 0; x < width; x++) {\n      // Apply scaling and time to create smooth animation\n      const nx = x / scale;\n      const ny = y / scale;\n\n      // Use time as the z-axis to animate the noise\n      const value = (perlinNoise(nx, ny) + 1) / 2;\n\n      // Store the value in the array\n      noiseArray[y * width + x] = value;\n    }\n  }\n\n  return noiseArray;\n}\n\nconst perm = generatePermutationTable();\n\n// Function to spawn the 100x100 grid of particles\nfunction spawnParticleGrid() {\n  if (!pos) {\n    pos = world.getAllPlayers().shift()?.getHeadLocation();\n  }\n  if (pos) {\n    let errorCount = 0;\n    try {\n      for (let y = 0, i = 0; y < height; y++) {\n        for (let x = 0; x < width; x++, i++) {\n          const position = {\n            x: pos.x - (width * step / 2) + x * step,\n            y: pos.y + (height * step / 3) + y * step,\n            z: pos.z + 1,\n          };\n\n          const r = noiseArray[i];\n          const g = noiseArray[i];\n          const b = noiseArray[i];\n\n          // Get a random color for each particle\n          //vars.setFloat(\"variable.r\", Math.random());\n          //vars.setFloat(\"variable.g\", Math.random());\n          //vars.setFloat(\"variable.b\", Math.random());\n          vars.setColorRGB(\"color\", { red: r, green: g, blue: b, r, g, b } as any);\n\n          // Spawn the particle at the current grid position with the random color\n          try {\n            overworld.spawnParticle(\"makecode:pixel\", position, vars);\n          } catch {\n            errorCount++;\n          }\n        }\n      }\n      if (errorCount > 0) {\n        world.sendMessage(`Error count: ${errorCount}`);\n      }\n    } catch (e) {\n      world.sendMessage(`Error: ${e}`);\n    }\n  }\n}\n\nfunction animate() {\n  // Generate Perlin noise for the current time\n  generatePerlinNoise();\n\n  // Draw the noise to the canvas\n  spawnParticleGrid();\n\n  // Increment time to animate\n  time += dt;\n\n  // Loop the animation\n  system.runTimeout(animate, animdt);\n}\n\nsystem.runTimeout(() => {\n  //world.sendMessage(\"Hello, Minecraft!\");\n  system.run(animate);\n}, 10);\n"],"mappings":"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","names":["perm"],"file":"../scripts/main.js"}